name: 'PR - 이슈 동기화'

on:
  pull_request:
    types: [opened, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  sync_meta_from_issue:
    runs-on: ubuntu-latest
    steps:
      - name: 첫 번째 참조 이슈로부터 assignee/label/milestone 동기화
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prOwner = context.repo.owner;
            const prRepo  = context.repo.repo;
            const prNumber = pr.number;
            const body = pr.body || "";

            // 1) PR 본문에서 "첫 번째" 이슈 참조(키워드 우선 → 일반 #) 추출
            const patterns = [
              /(?:^|\s)(?:close[sd]?|fixe?[sd]?|resolve[sd]?)\s+((?:[\w.-]+\/[\w.-]+)?#\d+)/i,
              /(?:^|\s)((?:[\w.-]+\/[\w.-]+)?#\d+)\b/,
            ];
            let ref = null;
            for (const re of patterns) {
              const m = body.match(re);
              if (m && m[1]) { ref = m[1].trim(); break; }
            }
            if (!ref) {
              core.info("🔎 참조된 이슈를 찾지 못했습니다. (예: #123 또는 Closes #123)");
              return;
            }

            // owner/repo#123 또는 #123 파싱
            let issueOwner = prOwner;
            let issueRepo  = prRepo;
            let issueNumber = null;

            if (ref.includes('#')) {
              const [left, numStr] = ref.split('#');
              issueNumber = Number(numStr);
              const leftTrim = left.trim();
              if (leftTrim && leftTrim.includes('/')) {
                const [o, r] = leftTrim.split('/');
                if (o && r) { issueOwner = o; issueRepo = r; }
              }
            }
            if (!issueNumber || Number.isNaN(issueNumber)) {
              core.warning(`⚠️ 이슈 번호 파싱 실패: ${ref}`);
              return;
            }

            core.info(`🔗 첫 번째 참조 이슈: ${issueOwner}/${issueRepo}#${issueNumber}`);

            // 2) 이슈 상세 조회
            const { data: issue } = await github.rest.issues.get({
              owner: issueOwner,
              repo: issueRepo,
              issue_number: issueNumber,
            });

            const issueAssignees = (issue.assignees || []).map(a => a.login);
            const issueLabels    = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name).filter(Boolean);
            const issueMilestone = issue.milestone ? issue.milestone.number : null;

            // 요약 텍스트(코멘트용)
            let summaryAssignees = issueAssignees.length ? issueAssignees.map(a => `@${a}`).join(", ") : "_비어있음_";
            let summaryLabels    = issueLabels.length ? issueLabels.map(l => `\`${l}\``).join(", ") : "_비어있음_";
            let summaryMilestone = issueMilestone ? `#${issueMilestone}` : "_비어있음_";

            // 2-1) Assignee 동기화
            if (issueAssignees.length) {
              try {
                await github.rest.issues.addAssignees({
                  owner: prOwner,
                  repo: prRepo,
                  issue_number: prNumber,
                  assignees: issueAssignees,
                });
                core.info(`✅ 담당자(assignees) 적용: ${issueAssignees.join(", ")}`);
              } catch (e) {
                core.warning(`⚠️ 담당자 적용 실패: ${e.message}`);
              }
            } else {
              core.info("ℹ️ 담당자(assignees): 비어있음");
            }

            // 2-2) Label 동기화
            if (issueLabels.length) {
              try {
                await github.rest.issues.addLabels({
                  owner: prOwner,
                  repo: prRepo,
                  issue_number: prNumber,
                  labels: issueLabels,
                });
                core.info(`✅ 라벨(labels) 적용: ${issueLabels.join(", ")}`);
              } catch (e) {
                core.warning(`⚠️ 라벨 적용 실패(라벨이 PR 저장소에 없을 수 있음): ${e.message}`);
              }
            } else {
              core.info("ℹ️ 라벨(labels): 비어있음");
            }

            // 2-3) Milestone 동기화
            if (issueMilestone) {
              if (issueOwner === prOwner && issueRepo === prRepo) {
                try {
                  await github.rest.issues.update({
                    owner: prOwner,
                    repo: prRepo,
                    issue_number: prNumber,
                    milestone: issueMilestone,
                  });
                  core.info(`✅ 마일스톤 적용: #${issueMilestone}`);
                } catch (e) {
                  core.warning(`⚠️ 마일스톤 적용 실패: ${e.message}`);
                }
              } else {
                core.info("🚫 마일스톤: 다른 저장소 이슈라 동기화 생략");
                summaryMilestone = "_다른 저장소라 생략_";
              }
            } else {
              core.info("ℹ️ 마일스톤: 비어있음");
            }

            // 3) 결과 요약 코멘트 남기기
            const lines = [];
            lines.push(`🔄 **이슈 메타데이터 동기화 결과**`);
            lines.push(`- 참조 이슈: **${issueOwner}/${issueRepo}#${issueNumber}**`);
            lines.push(`- 👥 담당자: ${summaryAssignees}`);
            lines.push(`- 🏷️ 라벨: ${summaryLabels}`);
            lines.push(`- 🗓️ 마일스톤: ${summaryMilestone}`);

            try {
              await github.rest.issues.createComment({
                owner: prOwner,
                repo: prRepo,
                issue_number: prNumber,
                body: lines.join("\n"),
              });
              core.info("✅ 결과 요약 코멘트를 PR에 등록했습니다.");
            } catch (e) {
              core.warning(`⚠️ 결과 코멘트 등록 실패: ${e.message}`);
            }
